# import streamlit as st
# import pandas as pd
# import seaborn as sns
# import matplotlib.pyplot as plt
# import joblib
# import os
# from sklearn.linear_model import LinearRegression
# from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
# from sklearn.tree import DecisionTreeRegressor
# from sklearn.svm import SVR
# from sklearn.model_selection import train_test_split
# from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
# import plotly.express as px

# # Load the preprocessed Excel data
# file_path = "preprocessed_education_data.xlsx"
# years = ['2016', '2017', '2018', '2019', '2020', '2021']
# data = {year: pd.read_excel(file_path, sheet_name=year) for year in years}

# # Combine data from all years into a single DataFrame
# df_combined = pd.concat(data, keys=years)
# df_combined.reset_index(level=0, inplace=True)
# df_combined.rename(columns={'level_0': 'Year'}, inplace=True)

# # Ensure Year is treated as numeric
# df_combined['Year'] = pd.to_numeric(df_combined['Year'], errors='coerce')

# # Ensure Unemployment Rate is numeric
# df_combined['Estimated Unemployment Rate (%)'] = pd.to_numeric(df_combined['Estimated Unemployment Rate (%)'], errors='coerce')

# # Streamlit app starts here
# st.title('Indian Education and Employment Analysis (2016-2021)')

# # User selects a state
# selected_state = st.selectbox('Select a State:', df_combined['State'].unique())

# # Filter data by the selected state
# state_data = df_combined[df_combined['State'] == selected_state]

# # Displaying filtered data
# st.write(f'Data for {selected_state} from 2016 to 2021')
# st.dataframe(state_data.head())

# # Feature and Target selection
# X = df_combined[['Estimated Employed', 'Estimated Labour Participation Rate (%)', 'UnderGraduate', 'PostGraduate']]
# y = df_combined['Estimated Unemployment Rate (%)']

# # Train-Test Split
# X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# # Dictionary to store models
# models = {
#     "Linear Regression": LinearRegression(),
#     "Random Forest Regressor": RandomForestRegressor(),
#     "Decision Tree Regressor": DecisionTreeRegressor(),
#     "Support Vector Regressor (SVR)": SVR(),
#     "Gradient Boosting Regressor": GradientBoostingRegressor()
# }

# # Sidebar for model selection
# selected_model = st.sidebar.selectbox('Select Model', list(models.keys()))

# # Sidebar for user inputs for predictions
# employed = st.sidebar.number_input('Estimated Employed', value=50000)
# labour_participation = st.sidebar.number_input('Labour Participation Rate (%)', value=50)
# undergrad = st.sidebar.number_input('UnderGraduate', value=10000)
# postgrad = st.sidebar.number_input('PostGraduate', value=5000)

# # Create a DataFrame for prediction input
# input_data = pd.DataFrame([[employed, labour_participation, undergrad, postgrad]],
#                           columns=['Estimated Employed', 'Estimated Labour Participation Rate (%)', 'UnderGraduate', 'PostGraduate'])

# # Check if model exists and load or train it
# model_path = f'{selected_model}.pkl'
# if os.path.exists(model_path):
#     model = joblib.load(model_path)
# else:
#     # Train the selected model
#     model = models[selected_model]
#     model.fit(X_train, y_train)
#     # Save the trained model
#     joblib.dump(model, model_path)

# # Make predictions
# prediction = model.predict(input_data)
# st.write(f'Predicted Unemployment Rate using {selected_model}: {prediction[0]:.2f}%')

# # Evaluate the model performance
# y_pred_train = model.predict(X_train)
# y_pred_test = model.predict(X_test)

# # Calculate metrics
# train_mse = mean_squared_error(y_train, y_pred_train)
# test_mse = mean_squared_error(y_test, y_pred_test)
# train_r2 = r2_score(y_train, y_pred_train)
# test_r2 = r2_score(y_test, y_pred_test)
# train_mae = mean_absolute_error(y_train, y_pred_train)
# test_mae = mean_absolute_error(y_test, y_pred_test)

# # Display performance metrics
# st.write(f"Training MSE: {train_mse:.2f}, Training R2: {train_r2:.2f}, Training MAE: {train_mae:.2f}")
# st.write(f"Testing MSE: {test_mse:.2f}, Testing R2: {test_r2:.2f}, Testing MAE: {test_mae:.2f}")

# # Visualization of Predictions vs Actuals
# st.subheader(f'{selected_model} - Predicted vs Actual Unemployment Rate')
# fig, ax = plt.subplots(figsize=(10, 6))
# sns.scatterplot(x=y_test, y=y_pred_test, ax=ax)
# ax.set_xlabel("Actual Unemployment Rate (%)")
# ax.set_ylabel("Predicted Unemployment Rate (%)")
# ax.set_title(f'{selected_model} - Actual vs Predicted')
# st.pyplot(fig)

# # Comparison of models' performance
# performance_df = pd.DataFrame({
#     'Model': [selected_model],
#     'Training MSE': [train_mse],
#     'Testing MSE': [test_mse],
#     'Training R²': [train_r2],
#     'Testing R²': [test_r2],
#     'Training MAE': [train_mae],
#     'Testing MAE': [test_mae]
# })

# st.subheader('Model Performance Overview')
# st.dataframe(performance_df)

# # Allow users to download the filtered data
# csv = state_data.to_csv().encode('utf-8')
# st.download_button(label='Download Filtered Data', data=csv, file_name='filtered_data.csv', mime='text/csv')

# # Feedback section
# feedback = st.text_area("Leave your feedback or insights here!")
# if st.button("Submit Feedback"):
#     st.write("Thank you for your feedback!")
